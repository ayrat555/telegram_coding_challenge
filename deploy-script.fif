#!/usr/bin/env fift -s
"TonUtil.fif" include
"Asm.fif" include

{ ."usage: " @' $0 type ." <workchain-id> <required_keys_number> <keys_number> <public_key1> .. <public_key_keys_number>" cr
  ."Creates a new multisig contract in specified workchain that requires <required_keys_number> of <keys_numbers> to make a transfer" cr
  1 halt
} : usage

$# 4 < { usage } if

$1 parse-workchain-id =: workchain_id
$2 parse-int =: required_keys
$3 parse-int =: keys_number

"multisig_wallet" =: multisig_wallet_file

."workchain_id = " workchain_id . cr
."required_keys = " required_keys . cr
."keys_number = " keys_number . cr

$# 3 - =: actual_public_keys

keys_number actual_public_keys > { ."Passed public keys number is too small" cr 1 halt } if

dictnew 0 2constant public_keys_dict
{ @' public_keys_dict } : public_keys_dict@
{ public_keys_dict@ nip } : public_key#

{ <b swap $, b> <s  public_keys_dict@ swap 16  udict!+  drop public_key# 1+  2 'nop does : public_keys_dict } : add_public_key


// fetching public keys to list
null 3 {  1 + dup  $# - } { dup $() rot cons swap  } while
$() swap cons
=: public_keys_list

public_keys_list { dup car add_public_key cdr } keys_number times

drop

PROGRAM{
"multisig.fif" include
}END>c
// code
<b 0 32 u,
   required_keys 32 u,
   keys_number 32 u,
   public_keys_dict@ drop .s dict, .s
   dictnew dict,
   b> // data

dup .s
2 boc+>B dup Bx. cr
"init_data.boc" tuck B>file
drop
cr ."After boc" cr
.s


null // no libraries
<b b{0011} s, 3 roll ref, rot ref, swap dict, b>  // create StateInit
.s
dup ."StateInit: " <s csr. cr
dup hash workchain_id swap 2dup 2constant wallet_addr
."new wallet address = " 2dup .addr cr
2dup multisig_wallet_file +".addr" save-address-verbose
."Non-bounceable address (for init): " 2dup 7 .Addr cr
."Bounceable address (for later access): " 6 .Addr cr
cr
."hererererer" cr
.s

<b 0 32 u, b>

<b b{1000100} s, wallet_addr addr, b{000010} s, .s cr swap <s s, b{0} s, swap <s s, b>

dup ."External message for initialization is " <s csr. cr
2 boc+>B dup Bx. cr
multisig_wallet_file +"-query.boc" tuck B>file
."(Saved wallet creating query to file " type .")" cr